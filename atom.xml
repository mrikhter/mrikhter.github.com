<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Blasha]]></title>
  <link href="http://mrikhter.github.com/atom.xml" rel="self"/>
  <link href="http://mrikhter.github.com/"/>
  <updated>2013-03-05T09:54:28-05:00</updated>
  <id>http://mrikhter.github.com/</id>
  <author>
    <name><![CDATA[Masha Rikhter]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Get, Post, Repeat]]></title>
    <link href="http://mrikhter.github.com/blog/2013/03/04/get/"/>
    <updated>2013-03-04T22:02:00-05:00</updated>
    <id>http://mrikhter.github.com/blog/2013/03/04/get</id>
    <content type="html"><![CDATA[<p>I&#8217;ll be the first to admit that I wouldn&#8217;t consider myself particularly adept in the interworkings of computers&#8230;or really technology in general. Prior to starting this program, EXAMPLE. Nevertheless, I am on a mission (well me and the school) to educate myself on all things TECH.</p>

<p>Most of the time, I&#8217;ll learn about something at a high level and it seems to make perfect sense. In practice, that&#8217;s rarely the case. One such subject came in the form of HTTP requests (pun intended). In the process of buiding our first app (check it out: <a href="http://www.octomaps.com">Octomaps</a>) I was able to dig deeper into the communication channel between client, server and application. Allow me to explain.</p>

<p>When a user enters a URL into a browser (the client), the client sends a request to the server hosting that website. The server then needs to process that request using the application, and return the appropriate response to the browser. That&#8217;s the simple explanation.</p>

<p>To expand, hypertext transfer protocol (HTTP), functions as the communicator between the client and the server. A specific request method is sent from the client to the server indicating the desired action to be performed on the resource of the application. I&#8217;ll focus on just the two most commonly used methods in this post: GET and POST.<br>
  The GET method, requests the retrieval of a resource or information.<br>
  The POST method, requests that the server accept the data enclosed as a new subordinate of the web resource. This data will typically be processed by the application.</p>

<p>Ok, great. So now we&#8217;ve got a general understanding of the GET and POST methods, but now what? Where do they go and how do we use them? That&#8217;s exactly where I stood a few days ago. My problem was two-fold. First of all, I needed to understand the interaction between the client-server-application. Then, I needed to wrap my head around creating/sending a form to the client to fill out and then using the inputs in my application. We&#8217;ll go through them one at a time.</p>

<p>Let&#8217;s walk through what happens in the client-server-application relationship.<br>
Please note that I have used the Sinatra framework to deploy my application on my local host.</p>

<p>REQUEST<br>
A user requests to go to the url: 0.0.0.0:9292<br>
The browser sends an HTTP request to 0.0.0.0:9292: GET / HTTP/1.1</p>

<p>This indicates:<br>
1) The GET method indicates that the server is supposed to return a resource.<br>
2) The requested URI of &#8216;/&#8217;, which is the root<br>
3) The HTTP protocol version (irrelevant for us here)</p>

<p>PROCESS REQUEST:<br>
The server looks at our controller.rb file for instructions.<br>
Searches for a get method which matches the specific url and executes the proceeding code, in our case it renders the form erb file.</p>

<p>RESPONSE:<br>
The server responds with: 200 1709 0.0539????</p>

<p>This indicates:<br>
1) A three-digit numeric status code. 200 means OK. Check out other <a href="https://developer.mozilla.org/en-US/docs/HTTP/HTTP_response_codes">response codes</a>.<br>
2) ?<br>
3) Request processing time</p>

<p>Next, on to creating/sending/using a form in the application.<br>
I knew what my basic setup was supposed to look like in Sinatra, but I wasn&#8217;t entirely sure how to use GET and POST appropiately to achieve my goal. The first hurdle to overcome was determining which method type to use for my form. At first it seemed to me like the there was a clear distinction between the two methods. Use GET to request data and POST to send data, and since I wanted a user to send the application data, I should use post. Unfortunately, it was not so clear cut since in practice you can use either GET or POST to send data from a form. Confusion insued.</p>

<p>Let&#8217;s look at the more practical differences between the two methods.</p>

<ul>Get - default if method not specified
<li>Appends the form-data to the URL in name/value pairs: URL?name=value&name=value</li>
<li>The length of a URL is limited (about 3000 characters)</li>
<li>Useful for form submissions where a user want to bookmark the result</li>
<li>Never use to send sensitive data, since inputs are visible in the URL</li></ul>




<ul>Post - Sends the form-data as an HTTP post transaction
<li>Appends form-data inside the body of the HTTP request (data is not shown is in URL)</li>
<li>Has no size limitations</li>
<li>Form submissions cannot be bookmarked</li></ul>


<p>I proceeded to experiment with the methods to obtain a clearer understanding of their function.
I created a controller.rb file and two forms, get_form.erb and post_form.erb.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>controller.rb
</span><span class='line'>require 'sinatra'
</span><span class='line'>require 'sinatra/reloader'
</span><span class='line'>
</span><span class='line'>get '/get' do
</span><span class='line'>  erb :get_form
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>get '/get/new' do
</span><span class='line'>  "You entered #{params[:fname]} #{params[:lname]}"
</span><span class='line'>end
</span><span class='line'>-------------------------------------------
</span><span class='line'>get '/post' do
</span><span class='line'>  erb :post_form
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>post '/post' do
</span><span class='line'>  "You entered #{params[:fname]} #{params[:lname]}"
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>When using get as the form method, the form needs to be directed to another URL in order to have access to the inputted data. This is accomplished by specifying a different URL in the form action. Also, the data can accessed using the get method in the controller at the new url.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>get_form.erb
</span><span class='line'>&lt;form action="/get/new" method="get"&gt;
</span><span class='line'>  First name: &lt;input type="text" name="fname"&gt;&lt;br&gt;
</span><span class='line'>  Last name: &lt;input type="text" name="lname"&gt;&lt;br&gt;
</span><span class='line'>  &lt;input type="submit" value="Submit"&gt;
</span><span class='line'>&lt;/form&gt;</span></code></pre></td></tr></table></div></figure>


<p><img src="http://mrikhter.github.com/images/get-1.png"><br></p>

<p>Note that after submitting the get method form, the inputted data is visible in the URL.
<img src="http://mrikhter.github.com/images/get-2.png"></p>

<p>When using post as the form method, the form does not need to be directed to another URL in order to have access to the inputted data. Also, the data can be accessed using the post method in the controller at the same.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>post_form.erb
</span><span class='line'>&lt;form action="/post" method="post"&gt;
</span><span class='line'>  First name: &lt;input type="text" name="fname"&gt;&lt;br&gt;
</span><span class='line'>  Last name: &lt;input type="text" name="lname"&gt;&lt;br&gt;
</span><span class='line'>  &lt;input type="submit" value="Submit"&gt;
</span><span class='line'>&lt;/form&gt;</span></code></pre></td></tr></table></div></figure>


<p><img src="http://mrikhter.github.com/images/post-1.png"><br></p>

<p>Note that after submitting the post method form, the inputted data is not visible in the URL.
<img src="http://mrikhter.github.com/images/post-2.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub: Basic How-to's]]></title>
    <link href="http://mrikhter.github.com/blog/2013/02/17/basic-github-how-to/"/>
    <updated>2013-02-17T12:55:00-05:00</updated>
    <id>http://mrikhter.github.com/blog/2013/02/17/basic-github-how-to</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/">GitHub</a>, a distributed version control system, is an essential tool for working on multi-dev projects.
In going through the prework for <a href="http://flatironschool.com/">The Flatiron School</a>, GitHub was one of the easier subjects to grasp&#8230;or so I thought. The first day of class would dramatically prove otherwise.</br></br>
Our first assignment included a deep dive into the mechanics of this collaborative tool, and it was a schmess. With 28 people cloning, forking, commiting, pushing and merging, I was left feeling lost and bewildered.
To be fair, the way in which we were working was not the most accurate depiction of a normal workflow.
In practice, it&#8217;s rare to have multiple people working on the same file at the same time.</br></br>
In any case, I decided to create a basic workflow model to help beginners like myself navigate their way through GitHub with a decreased fear of overwriting work by people who actually know what they&#8217;re doing. Note that in the following examples, anything in &lt;brackets> is meant to be replaced with your own info.</br></p>

<p>Are you the creator of the remote repository?</br>
If so, create a remote repository on GitHub:</br>
<img src="http://mrikhter.github.com/images/image3.jpg">
<img src="http://mrikhter.github.com/images/Screenshot_2_17_13_12_41_PM-5.png"></p>

<p>Next, you need to create a directory for your project, initialize it with the necessary git files and point it to the remote repository. You&#8217;ll need to obtain the url from the page that pops up after selecting &#8220;create repository&#8221;:</br>
<img src="http://mrikhter.github.com/images/image4.png"></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mkdir &lt;directory&gt;
</span><span class='line'>$ cd &lt;directory&gt;
</span><span class='line'>$ git init
</span><span class='line'>$ git remote add origin &lt;url&gt;</span></code></pre></td></tr></table></div></figure>


<p>Note that you can point an existing directory to the remote repo by skipping the first two steps. Just make sure you are in the desired directory when running the commands!</br></p>

<p>Do you need a copy of an existing repository?</br>
If so, use the clone command to create a local copy of the remote repository. To clone, you need the url from GitHub, which you can find on the repository’s page. </br></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone &lt;url&gt; &lt;name&gt;</span></code></pre></td></tr></table></div></figure>


<p>Only include name if you want your local copy to have a different name than the remote. </br></p>

<p>In some cases, you will want to fork instead of clone. You&#8217;ll want to use the fork command when you cannot contribute to the remote repository on GitHub.</br>
<img src="http://mrikhter.github.com/images/Image2.png"></br>
A fork will create a copy of the remote repo to your account. From there, follow the previous cloning step.</br></p>

<p>The workflow after the initialization of the repository will operate in the same way.
If you&#8217;re planning on doing any work, whether you are working on an existing file or creating new files, you&#8217;ll want to create a branch. This will copy the contents of the master (local) repository. Do all of your work on separate branches.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout -b &lt;your-branch-name&gt;
</span><span class='line'># this creates a new branch and switches you into it</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s pretend you&#8217;ve accomplished something you&#8217;d like to share. You need to add, commit and eventually push this file up to the remote repository for all the world to see.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add .
</span><span class='line'># This will add all files that have been changed to a tracking stage. 
</span><span class='line'># If you only want to add specific files, just replace the . with the name of the file.
</span><span class='line'>
</span><span class='line'>$ git commit -m "&lt;descriptive message&gt;"
</span><span class='line'># This commits the staged files.</span></code></pre></td></tr></table></div></figure>


<p>The next few steps are where the confusion and anxiety ensues. The thing is, there&#8217;s a pretty good chance that while you were working, someone else was working too, maybe on the same file you were working on, maybe not. The point is you don&#8217;t know, and you need to find out.</br>
Get back to your master branch and update your copy with the most recent copy from the remote repo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout master
</span><span class='line'>$ git pull </span></code></pre></td></tr></table></div></figure>


<p>Good, so now your copy of the master branch is up-to-date. You shouldn&#8217;t have any issues here since you did your work in a separate branch. Pulling actually accomplishes two things - fetching the files and merging them onto your master branch. Technically we could have used git fetch and git merge, but again since your work was done on a separate branch we aren&#8217;t terribly concerned with other peoples changes yet. The next steps will tell you if your changes are compatible with the changes made to the master.</br>
First, switch to your branch:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout &lt;your-branch-name&gt;</span></code></pre></td></tr></table></div></figure>


<p>Next, rebase to update your branch with the changes from the master remote repo from which you just pulled. A rebase takes the changes that you have commited, sets them aside, then it takes all the changes from the master branch, and puts them on your branch, THEN it takes your changes and puts them back on top of that. If there is a conflict, it will provide you with instructions on how to fix it, although to be fair these instructions are indiscernible to me thus far. There are a couple other options but we&#8217;ll stick with this one for now as it keeps the commits history linear. Reserve rebase for your local repository since this command rewrites the commit history.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git rebase master</span></code></pre></td></tr></table></div></figure>


<p>Cross your fingers that there are no conflicts, solve them if there are (ok, maybe easier said than done) and then merge your branch with the master local and push it to the repo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git checkout master
</span><span class='line'>$ git merge &lt;your-branch-name&gt;
</span><span class='line'>$ git push</span></code></pre></td></tr></table></div></figure>


<p>Tada! We&#8217;re all on our way to becoming productive members of GitHub and society at-large.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Top 4 Motivations for Taking the Leap to Code]]></title>
    <link href="http://mrikhter.github.com/blog/2013/02/12/top-4-motivations-for-taking-the-leap-to-code/"/>
    <updated>2013-02-12T08:45:00-05:00</updated>
    <id>http://mrikhter.github.com/blog/2013/02/12/top-4-motivations-for-taking-the-leap-to-code</id>
    <content type="html"><![CDATA[<p>My quick and dirty reasoning behind a career change from hedge fund auditor to developer.</p>

<p><b>Meaningful and Realistic Contributions</b></br>
In the midst of my previous career, I came to the realization that I functioned as a necessary evil. Somehow I had overlooked this glaring fact when determining my path, but in that instance I knew I couldn&#8217;t live my life in this capacity. I wanted to contribute, to be an active and productive being, I had all the qualifications after all. As children, many of us dreamt of changing the world. In time, reality and cynisim creapt over our lofty goals and we let go of our seemingly niave desires. Yet as a developer, not only is this idea of effecting change completely within reach, it is limited only by your imagination.</p>

<p>Consistently Evolving Industry</br>
There is no way to know everything there is to know about programming. Ever. The thought of a lifetime of learning and growth is incredibly appealing to me. The tech world is one of few that literally thrives on account of constant improvement. There is no room for complacency in life and I want my career (aka my day-to-day existence) to be a reflection of this mantra.</p>

<p>The Culture</br>
There is so much to be said for surrounding yourself by the right people&#8230;and most people have already said it. I subscribe to the belief that loving what you do is equally important as doing it with good people. Motivated, positive, open-minded and kind people will elevate your mood and in turn your general happiness. I consider myself to be amongst these people and as such I want these people to be amongst me.</p>

<p>I Love Puzzles</br>
Seriously, writing code is like solving a super complicated puzzle. Sure it&#8217;s frustrating when you can&#8217;t find that perfectly fitting piece and sure sometimes you try to shove one in that you know doesn&#8217;t fit, but you can&#8217;t deny that giddy sense of accomplishment when it all works out. I want to feel that joy everyday.</p>

<p>Over the next three months, I&#8217;m eager to uncover new reasons that uphold my decision that I didn&#8217;t even know existed.</p>

<p>Are you contemplating taking this leap as well?</p>

<p>If you&#8217;re already there, what were your motivations?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello]]></title>
    <link href="http://mrikhter.github.com/blog/2013/02/06/hello/"/>
    <updated>2013-02-06T11:19:00-05:00</updated>
    <id>http://mrikhter.github.com/blog/2013/02/06/hello</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
